#
#  Copyright 2015 VMware, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
---
- name: deploy nsx-man
  nsx_deploy_ova:
    ovftool_path: "{{ ovfToolPath }}"
    datacenter: "{{ deployDataCenterName }}"
    datastore: "{{ deployMgmtDatastoreName }}"
    portgroup: "{{ deployMgmtPortGroup }}"
    cluster: "{{ deployCluster }}"
    vmname: "{{ deployVmName }}"
    nsxhostname: "{{ deployHostname }}"
    dns_server: "{{ deployMgmtDnsServer }}"
    dns_domain: "{{ deployMgmtDnsDomain }}"
    ntp_server: "{{ deployNtpServers }}"
    gateway: "{{ deployMgmtDefaultGateway }}"
    ip_address: "{{ deployMgmtIpAddress }}"
    netmask: "{{ deployMgmtNetmask }}"
    admin_password: "{{ nsxCliPass }}"
    enable_password: "{{ nsxEnPass }}"
    path_to_ova: "{{ nsxmanOvaPath }}"
    ova_file: "{{ nsxmanOva }}"
    hostname: "{{ deployVcIPAddress }}"
    username: "{{ deployVcUser }}"
    password: "{{ deployVcPassword }}"
    validate_certs: False
  register: deploy_nsx_man
  tags: nsx_deploy_ova

- name: Register NSX Manager to vCenter
  nsx_vc_registration:
    nsxmanager_spec: "{{ nsxmanager_spec }}"
    vcenter: "{{ vcIpAddress }}"
    vcusername: "{{ vcUser }}"
    vcpassword: "{{ vcPassword }}"
    accept_all_certs: true
  register: vc_registration
  tags: nsx_vc_registration

- name: Connect NSX Manager to SSO
  nsx_sso_registration:
    state: present
    nsxmanager_spec: "{{ nsxmanager_spec }}"
    sso_lookupservice_url: 'lookupservice/sdk'
    sso_lookupservice_port: 443
    sso_lookupservice_server: "{{ vcSsoHostname }}"
    sso_admin_username: "{{ vcSsoUser }}"
    sso_admin_password: "{{ vcSsoPassword }}"
    accept_all_certs: true
  tags: nsx_vc_registration

- name: Gather vCenter Mgmt Edge Cluster moid
  vcenter_gather_moids:
    hostname: "{{ vcHostname }}"
    username: "{{ vcUser }}"
    password: "{{ vcPassword }}"
    validate_certs: False
    datacenter_name: "{{ targetDatacenterName }}"
    cluster_name: "{{ targetClusters.cluster2.clusterName }}"
  register: vcenter_mgmt_cluster_moid
  tags: vsphere_facts

- name: Gather vCenter management datastore moid
  vcenter_gather_moids:
    hostname: "{{ vcHostname }}"
    username: "{{ vcUser }}"
    password: "{{ vcPassword }}"
    validate_certs: False
    datacenter_name: "{{ targetDatacenterName }}"
    datastore_name: "{{ nsxControllerDatastore }}"
  register: vcenter_mgmt_datastore_moid
  tags: vsphere_facts

- name: Gather vCenter management portgroup moid
  vcenter_gather_moids:
    hostname: "{{ vcHostname }}"
    username: "{{ vcUser }}"
    password: "{{ vcPassword }}"
    validate_certs: False
    datacenter_name: "{{ targetDatacenterName }}"
    portgroup_name: "{{ nsxControllerPortGroup }}"
  register: vcenter_mgmt_portgroup_moid
  tags: vsphere_facts

- name: Create IP Controller IP Pools
  nsx_ippool:
    nsxmanager_spec: "{{ nsxmanager_spec }}"
    state: present
    name: "{{ nsxIppools.controller.name }}"
    start_ip: "{{ nsxIppools.controller.start_ip }}"
    end_ip: "{{ nsxIppools.controller.end_ip }}"
    prefix_length: "{{ nsxIppools.controller.prefix_length }}"
    gateway: "{{ nsxIppools.controller.gateway }}"
    dns_server_1: "{{ nsxIppools.controller.dns_server_1 }}"
    dns_server_2: "{{ nsxIppools.controller.dns_server_2 }}"
  register: controller_ip_pool
  tags: controller_nsx_ippools

- name: Create NSX Controller cluster
  nsx_controllers:
      nsxmanager_spec: "{{ nsxmanager_spec }}"
      state: present
      deploytype: "{{ controllerDeployType }}"
      syslog_server: "{{ controllerSyslogServer }}"
      ippool_id: "{{ controller_ip_pool.ippool_id }}"
      resourcepool_moid: "{{ vcenter_mgmt_cluster_moid.object_id }}"
      datastore_moid: "{{ vcenter_mgmt_datastore_moid.object_id }}"
      network_moid: "{{ vcenter_mgmt_portgroup_moid.object_id }}"
      password: "{{ controllerPassword }}"
  tags: nsx_controllers

- name: Gather vCenter compute Cluster moid
  vcenter_gather_moids:
    hostname: "{{ vcHostname }}"
    username: "{{ vcUser }}"
    password: "{{ vcPassword }}"
    validate_certs: False
    datacenter_name: "{{ targetDatacenterName }}"
    cluster_name: "{{ targetClusters.cluster1.clusterName }}"
  register: vcenter_compute_cluster_moid
  tags: vsphere_facts

- name: Install VIBs (prepare) the compute cluster
  nsx_cluster_prep:
    nsxmanager_spec: "{{ nsxmanager_spec }}"
    state: present
    cluster_moid: "{{ vcenter_compute_cluster_moid.object_id }}"
  register: cluster_prep_compute
  tags: nsx_cluster_prep

- name: Install VIBs (prepare) the mgmt and edge cluster
  nsx_cluster_prep:
    nsxmanager_spec: "{{ nsxmanager_spec }}"
    state: present
    cluster_moid: "{{ vcenter_mgmt_cluster_moid.object_id }}"
  register: cluster_prep_mgmt
  tags: nsx_cluster_prep

- name: Gather vCenter Transport DVS moid Compute
  vcenter_gather_moids:
    hostname: "{{ vcHostname }}"
    username: "{{ vcUser }}"
    password: "{{ vcPassword }}"
    validate_certs: False
    datacenter_name: "{{ targetDatacenterName }}"
    dvs_name: "{{ vxlan_compute_vds }}"
  register: compute_vcenter_dvs_moid
  tags: vsphere_facts

- name: Gather vCenter Transport DVS moid Edge
  vcenter_gather_moids:
    hostname: "{{ vcHostname }}"
    username: "{{ vcUser }}"
    password: "{{ vcPassword }}"
    validate_certs: False
    datacenter_name: "{{ targetDatacenterName }}"
    dvs_name: "{{ vxlan_edge_vds }}"
  register: edge_vcenter_dvs_moid
  tags: vsphere_facts

- name: Create VTEP IP Pools
  nsx_ippool:
    nsxmanager_spec: "{{ nsxmanager_spec }}"
    state: present
    name: "{{ nsxIppools.vteps.name }}"
    start_ip: "{{ nsxIppools.vteps.start_ip }}"
    end_ip: "{{ nsxIppools.vteps.end_ip }}"
    prefix_length: "{{ nsxIppools.vteps.prefix_length }}"
    gateway: "{{ nsxIppools.vteps.gateway }}"
    dns_server_1: "{{ nsxIppools.vteps.dns_server_1 }}"
    dns_server_2: "{{ nsxIppools.vteps.dns_server_2 }}"
  register: vtep_ip_pool
  tags: vtep_nsx_ippools

- name: VXLAN Prep (configure VTEP) on compute cluster
  nsx_vxlan_prep:
    nsxmanager_spec: "{{ nsxmanager_spec }}"
    state: present
    cluster_moid: "{{ vcenter_compute_cluster_moid.object_id }}"
    dvs_moid: "{{ compute_vcenter_dvs_moid.object_id }}"
    ippool_id: "{{ vtep_ip_pool.ippool_id }}"
    vlan_id: "{{ vxlan_vlan_id }}"
    teaming: "{{ vxlan_teaming }}"
  register: vxlan_prep
  tags: nsx_vxlan_prep

- name: VXLAN Prep (configure VTEP) on Edge cluster
  nsx_vxlan_prep:
    nsxmanager_spec: "{{ nsxmanager_spec }}"
    state: present
    cluster_moid: "{{ vcenter_mgmt_cluster_moid.object_id }}"
    dvs_moid: "{{ edge_vcenter_dvs_moid.object_id }}"
    ippool_id: "{{ vtep_ip_pool.ippool_id }}"
    vlan_id: "{{ vxlan_vlan_id }}"
    teaming: "{{ vxlan_teaming }}"
  register: vxlan_prep
  tags: nsx_vxlan_prep

- name: Create Segment Id Pool
  nsx_segment_id_pool:
    nsxmanager_spec: "{{ nsxmanager_spec }}"
    state: present
    idpoolstart: "{{ segmentIdPoolStart }}"
    idpoolend: "{{ segmentIdPoolEnd }}"
    mcast_enabled: "{{ mcastEnabled }}"
    mcastpoolstart: "{{ mcastAddrStart }}"
    mcastpoolend: "{{ mcastAddrEnd }}"
  register: segment_pool
  tags: nsx_segment_pool

- name: Add a Transport Zone with the Cluters as members
  nsx_transportzone:
    nsxmanager_spec: "{{ nsxmanager_spec }}"
    state: 'present'
    name: "{{ transportZoneName }}"
    controlplanemode: "{{ defaultControllPlaneMode }}"
    description: "{{ transportZoneDescription }}"
    cluster_moid_list:
      - "{{ vcenter_mgmt_cluster_moid.object_id }}"
      - "{{ vcenter_compute_cluster_moid.object_id }}"
  register: transport_zone
  tags: nsx_transport_zone

- name: Create NSX Logical Switch
  nsx_logical_switch:
    nsxmanager_spec: "{{ nsxmanager_spec }}"
    state: "{{ global_state }}"
    name: "{{ virtwire_dev_name }}"
    description: "{{ virtwire_dev_desc }}"
    transportzone: "{{ transportZoneName }}"
    controlplanemode: "{{ virtwire_dev_mode }}"
  register: virt_wire_dev
  tags: esg_create

- name: debug virt wire create
  debug: msg="{{ item }}"
  with_items:
    - "{{ virt_wire_dev }}"
  tags: esg_create

- name: Gather vCenter Cluster moid
  vcenter_gather_moids:
    hostname: "{{ vcHostname }}"
    username: "{{ vcUser }}"
    password: "{{ vcPassword }}"
    validate_certs: False
    datacenter_name: "{{ targetDatacenterName }}"
    cluster_name: "{{ esg_cluster }}"
  register: esg_cluster_moid
  tags: esg_create

- name: Gather vCenter Edge Cluster Datastore moid
  vcenter_gather_moids:
    hostname: "{{ vcHostname }}"
    username: "{{ vcUser }}"
    password: "{{ vcPassword }}"
    validate_certs: False
    datacenter_name: "{{ targetDatacenterName }}"
    datastore_name: "{{ esg_datastore }}"
  register: esg_cluster_ds_moid
  tags: esg_create

- name: Gather vCenter Uplink Portgroup moid
  vcenter_gather_moids:
    hostname: "{{ vcHostname }}"
    username: "{{ vcUser }}"
    password: "{{ vcPassword }}"
    validate_certs: False
    datacenter_name: "{{ targetDatacenterName }}"
    portgroup_name: "{{ esg_vnic_ext_pg }}"
  register: esg_uplink_pg_moid
  tags: esg_create

- name: ESG creation DEV
  nsx_edge_router:
    nsxmanager_spec: "{{ nsxmanager_spec }}"
    state: "{{ global_state }}"
    name: "{{ esg_dev_name }}"
    description: "{{ esg_dev_desc }}"
    resourcepool_moid: "{{ esg_cluster_moid.object_id }}"
    datastore_moid: "{{ esg_cluster_ds_moid.object_id }}"
    datacenter_moid: "{{ esg_cluster_moid.datacenter_moid }}"
    interfaces:
      vnic0: {ip: "{{ esg_dev_vnic0_ip }}", prefix_len: "{{ esg_dev_vnic0_cider | int }}", portgroup_id: "{{ esg_uplink_pg_moid.object_id }}", name: "{{ esg_dev_vnic0_name }}", iftype: "{{ esg_dev_vnic0_iftype}}" }
      vnic1: {ip: "{{ esg_dev_vnic1_ip }}", prefix_len: "{{ esg_dev_vnic1_cider | int }}", logical_switch: "{{ virtwire_dev_name }}", name: "{{ esg_dev_vnic1_name }}", iftype: "{{ esg_dev_vnic1_iftype }}" }
    default_gateway: "{{ esg_dev_default_gwy }}"
    remote_access: "{{ esg_dev_remote_access }}"
    username: "{{ esg_dev_username }}"
    password: "{{ esg_dev_password }}"
    firewall: "{{ esg_dev_firewall }}"
    ha_enabled: "{{ esg_dev_ha }}"
    appliance_size: "{{ esg_dev_size }}"
  register: create_esg_dev
  tags: esg_create

- name: Update esg default fw rules DEV
  nsx_edge_firewall:
    nsxmanager_spec: "{{ nsxmanager_spec }}"
    esg_name: "{{ esg_dev_name }}"
    firewall_ipsets:
      ipset: False
      inheritance: False
    firewall_default:
      action: "{{ esg_fw_default_action_dev }}"
      only: True
    firewall_rules:
      - name: 'allow_external_access'
        loggingEnabled: 'false'
        matchTranslated: 'false'
        destination:
          exclude: 'false'
          ipAddress: '10.159.16.0/24'
        enabled: 'true'
        source:
          exclude: 'false'
          ipAddress: '10.159.17.0/24'
        action: 'accept'
        description: 'this is a fake fw rule'
    state: "{{ global_state }}"
  register: esg_fw_results
  tags:
    - esg_fw
